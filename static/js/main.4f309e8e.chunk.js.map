{"version":3,"sources":["Example.js","../../src/index.js","App.js","index.js"],"names":["Example","setResult","isMounted","useRef","useEffect","useMounted","useState","useMount","setUseMount","checkIfMounted","counter","setCounter","current","incrementCounter","c","onClick","setTimeout","t","App","toggle","setToggle","result","ReactDOM","render","document","getElementById"],"mappings":"kOAGaA,EAAU,EAAGC,gBACxB,IAAMC,ECFW,WACf,IAAMA,EAAYC,kBAAlB,GAOA,OALAC,qBAAU,WAEN,OADAF,aACO,kBAAMA,WAAN,KAFXE,IAKO,kBAAMF,EAAN,SDNSG,GADsB,EAERC,oBAAS,GAFD,mBAEjCC,EAFiC,KAEvBC,EAFuB,KAGlCC,EAAiBN,iBAAOI,GAHU,EAIVD,mBAAS,GAJC,mBAIjCI,EAJiC,KAIxBC,EAJwB,KAMxCP,oBAAU,KACRK,EAAeG,QAAUL,GACxB,CAACA,IAEJ,IAAMM,EAAmB,KACvB,GAAKX,IAQHD,EAAU,sDARM,CAChB,GAAIQ,EAAeG,QAEjB,YADAX,EAAU,oFAGZA,EAAU,uDAMZU,EAAYG,GAAMA,EAAI,IAGxB,OACE,oCACE,6BACE,4BAAQC,QAAS,IAAMC,WAAWH,EAAkB,MAApD,sCADF,qBAEaH,GAEb,6BACE,4BAAQK,QAAS,IAAMP,EAAaS,IAAOA,IAA3C,QAAoD,2CAApD,SAA8EV,EAAW,MAAQ,MADnG,yBAEiBA,EAAW,GAAK,MAFjC,kBECSW,EAhCH,KAAO,IAAD,EACcZ,oBAAS,GADvB,mBACRa,EADQ,KACAC,EADA,OAEcd,mBAAS,IAFvB,mBAERe,EAFQ,KAEApB,EAFA,KAIhB,OACE,6BACE,4CACA,4BACE,+FAAoE,sCAApE,eACA,yGAA8E,sCAA9E,sCACA,yGAA8E,8CAA9E,gBAAoH,sCAApH,gBAGF,4BACE,mNACA,+JAAoI,sCAApI,gEAEA,4BACE,sCAAW,8CAAX,4IACA,sCAAW,8CAAX,oHAGJ,6BAAK,4BAAQc,QAAS,IAAMK,EAAWH,IAAOA,IAAzC,UAAoD,sCAApD,eACL,wCAAcI,GACd,6BACE,kDACCF,GAAU,kBAACnB,EAAD,CAASC,UAAWA,OCvBvCqB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.4f309e8e.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useMounted } from '@ithreat/use-mounted';\r\n\r\nexport const Example = ({ setResult }) => {\r\n  const isMounted = useMounted();\r\n  const [useMount, setUseMount] = useState(false);\r\n  const checkIfMounted = useRef(useMount);\r\n  const [counter, setCounter] = useState(0);\r\n\r\n  useEffect(() => {\r\n    checkIfMounted.current = useMount;\r\n  }, [useMount]);\r\n\r\n  const incrementCounter = () => {\r\n    if (!isMounted()) {\r\n      if (checkIfMounted.current) {\r\n        setResult(\"SUCCESS: useMounted() prevented unmounted component from attempting state update\");\r\n        return;\r\n      }\r\n      setResult(\"FAILURE: unmounted component attempted state update\");\r\n    }\r\n    else {\r\n      setResult(\"CONTROL: mounted component can do state update\");\r\n    }\r\n\r\n    setCounter((c) => c + 1);\r\n  };\r\n\r\n  return (\r\n    <blockquote>\r\n      <div>\r\n        <button onClick={() => setTimeout(incrementCounter, 3000)}>Increment Counter (after 3s delay)</button> &bull;\r\n        Counter = {counter}\r\n      </div>\r\n      <div>\r\n        <button onClick={() => setUseMount((t) => !t)}>Turn <b>useMounted()</b> Hook {useMount ? 'Off' : 'On'}</button> &bull;\r\n        useMount() is {useMount ? '' : 'not'} being used.\r\n      </div>\r\n    </blockquote>\r\n  );\r\n};\r\n","import { useRef, useEffect } from 'react';\n\nconst useMounted = () => {\n    const isMounted = useRef(false);\n\n    useEffect(() => {\n        isMounted.current = true;\n        return () => isMounted.current = false;\n    }, []);\n\n    return () => isMounted.current;\n};\n\nexport { useMounted };","import React, { useState } from 'react';\nimport { Example } from './Example';\n\nconst App = () => {\n  const [ toggle, setToggle ] = useState(true);\n  const [ result, setResult ] = useState('');\n\n  return (\n    <div>\n      <h2>Instructions</h2>\n      <ul>\n        <li>Click the \"Toggle Example Component\" button to show or hide the <b>Example</b> component.</li>\n        <li>Click the \"Increment Counter\" button to increment a state variable in the <b>Example</b> component after a 3 second delay.</li>\n        <li>Click the \"Turn useMounted() Hook On/Off\" button to toggle the use of the <code>useMounted()</code> hook in the <b>Example</b> component.</li>\n      </ul>\n\n      <ul>\n        <li>If you click the \"Increment Counter\" button, and do not click the \"Toggle Example Component\" button before 3 seconds have elapsed, the \"Result\" area will give a \"CONTROL\" message.</li>\n        <li>If you click the \"Increment Counter\" button, and click the \"Toggle Example Component\" button before 3 seconds have elapsed, the <b>Example</b> component\n            will attempt to update its state while unmounted.</li>\n        <ul>\n          <li>If the <code>useMounted()</code> hook is turned on, then when the state update is attempted it will be intercepted, and the \"Result\" area will give a \"SUCCESS\" message.</li>\n          <li>If the <code>useMounted()</code> hook is turned off, then when the state update is attempted, the \"Result\" area will give a \"FAILURE\" message.</li>\n        </ul>\n      </ul>\n      <div><button onClick={() => setToggle((t) => !t)}>Toggle <b>Example</b> Component</button></div>\n      <div>Result: {result}</div>\n      <div>\n        <h3>Example Component:</h3>\n        {toggle && <Example setResult={setResult}/>}\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}